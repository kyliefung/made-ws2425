# I use "Simple workflow" as a template
# This is a basic workflow to help me get started with Actions

name: Continuous Integration Workflow 

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  # Task: On every push to the main branch, execute your tests
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Install dependencies required for my tests.
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install pandas selenium webdriver-manager kagglehub

      # Run the test script
      - name: Run tests
        run: |
          chmod +x project/tests.sh
          ./project/tests.sh

      # Upload test results 
      # If all else fails, comment out the actual test invocation in 
      # your test.sh (with an explanation why) but still set up a GitHub action
      - name: Archive test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs
          path: ./test-results/

